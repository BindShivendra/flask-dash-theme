- In single-script applications, the application instance exists in the global scope, 
    so routes can be easily defined using the app.route decorator. But now that the 
    application is created at runtime, the app.route decorator begins 
    to exist only after create_app() is invoked, which is too late. Custom error page 
    handlers present the same problem, as these are defined with the app.errorhandler 
    decorator. 

-  A blueprint is similar to an application in that it can also define routes and error 
    handlers. The difference is that when these are defined in a blueprint they are in a 
    dormant state until the blueprint is registered with an application, at which point 
    they become part of it. Using a blueprint defined in the global scope, the routes and 
    error handlers of the application can be defined in almost the same way as in the single-script 
    application

- Flask context globals
    current_app :: Application context :: The application instance for the active application.
    g           :: Application context :: An object that the application can use for temporary storage during the 
                                            handling of a request. This variable is reset with each request. 
    request     :: Request context     :: The request object, which encapsulates the contents of an HTTP request 
                                            sent by the client. 
    session     :: Request context     :: The user session, a dictionary that the application can use to store 
                                            values that are “remembered” between requests.
    If any of these variables are accessed without an active application or request context, an error is generated

- Request hooks
    before_request 
        Registers a function to run before each request.
    before_first_request 
        Registers a function to run only before the first request is handled. This can be a convenient way to add server initialization tasks.
    after_request 
        Registers a function to run after each request, but only if no unhandled exceptions occurred.
    teardown_request 
        Registers a function to run after each request, even if unhandled exceptions occurred

- it is considered good practice for web applications to never leave a POST request as the last request sent 
    by the browser. This is achieved by responding to POST requests with a redirect instead of a normal response
    Store form data in session variable

